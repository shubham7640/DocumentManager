package com.springReact.DocumentManager.domain;

import com.fasterxml.jackson.annotation.JsonInclude;
import org.springframework.http.HttpStatus;

import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_DEFAULT)
public record Response(String time, int code, String path, HttpStatus httpStatus, String message, String exception, Map<?,?> data) {
//    https://www.geeksforgeeks.org/what-are-java-records-and-how-to-use-them-alongside-constructors-and-methods/
//    Record is replacement of class to remove boilerplate code for class which will not be extended/inherited
//    The class and its data members have been declared as final. This implies that this class cannot be extended, i.e. cannot be inherited, and is immutable as well.
//    The class extends java.lang.Record. This means that all records are a subclass of Record defined in java.lang package.
//    There is a default constructor and a parameterized constructor. You’ll notice that there is no separate declaration for the compact constructor that we defined. This is because the compact constructor does not generate a separate constructor but adds its code to the start of the default constructor’s body.
//    The instance and static methods are declared as they were.
//    The toString(), hashCode(), and equals() methods have been auto-generated by the compiler.


}
